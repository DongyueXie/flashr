% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flash.R
\name{flash_add_greedy}
\alias{flash_add_greedy}
\title{Adds factors to a flash object by a greedy approach}
\usage{
flash_add_greedy(data, Kmax = 1, f_init = NULL, var_type = c("by_column",
  "constant"), init_fn = "udv_si", tol = 0.01, ebnm_fn = ebnm_ash,
  ebnm_param = list(), verbose = FALSE, nullcheck = TRUE)
}
\arguments{
\item{data}{an n by p matrix or a flash data object created using \code{flash_set_data}}

\item{Kmax}{the maximum number of factors to add to f_init}

\item{f_init}{a flash fit object to start the greedy algorithm: the greedy algorithm iteratively adds up to Kmax factors
to this initial fit. (If NULL then the greedy algorithm starts with 0 factors)}

\item{var_type}{type of variance structure to assume for residuals.}

\item{init_fn}{function to be used to initialize each factor when added. This function should take as
input an n by p matrix of data (or a flash data object)
and output a list with elements (u,d,v) where u is an n-vector,
v is a p-vector and d is a scalar. See \code{udv_si} for an example,
and examples below. (If the input data includes missing values then this function must be able
to deal with missing values in its input matrix.)}

\item{tol}{specify how much objective can change in a single iteration to be considered not converged}

\item{ebnm_fn}{function to solve the Empirical Bayes Normal Means problem}

\item{ebnm_param}{parameters to be passed to ebnm_fn when optimizing; defaults set by flash_default_ebnm_param()}

\item{verbose}{if TRUE various output progress updates will be printed}

\item{nullcheck}{flag whether to check, after running
hill-climbing updates, whether the achieved optimum is better than setting factor to 0.
If this check is performed and fails then the factor will be set to 0 in the returned fit.}
}
\value{
a fitted flash object
}
\details{
Adds factors iteratively, at each time adding a new factor and then optimizing it.
It is "greedy" in that it does not return to re-optimize previous factors.
The function stops when an added factor contributes nothing, or Kmax is reached.
Each new factor is intialized by applying the function `init_fn` to the residuals
after removing previously-fitted factors.
}
\examples{
l = rnorm(100)
f = rnorm(10)
Y = outer(l,f) + matrix(rnorm(1000),nrow=100)
f = flash_add_greedy(Y,10)
flash_get_sizes(f)
# example to show how to use a different initialization function
f2 = flash_add_greedy(Y,10,function(x,K=1){softImpute::softImpute(x,K,lambda=10)})
}
