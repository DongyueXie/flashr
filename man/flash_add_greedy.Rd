% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greedy.R
\name{flash_add_greedy}
\alias{flash_add_greedy}
\title{Fit Empirical Bayes Matrix Factorization (greedy algorithm)}
\usage{
flash_add_greedy(data, Kmax = 100, f_init = NULL,
  var_type = c("by_column", "by_row", "constant", "zero", "kroneker"),
  init_fn = "udv_si", tol = 0.01, ebnm_fn = "ebnm_pn",
  ebnm_param = NULL, verbose = TRUE, nullcheck = TRUE, seed = 123)
}
\arguments{
\item{f_init}{The flash object or flash fit object to which new
factors are to be added. If \code{f_init = NULL}, then a new flash
object is created.}

\item{var_type}{The type of variance structure to assume for
residuals. Options include:
\describe{
  \item{\code{"by_column"}}{Residuals in any given column are
    assumed to have the same variance.}
  \item{\code{"by_row"}}{Residuals in any given row have the
    same variance.}
  \item{\code{"constant"}}{All residuals are assumed to have the
    same variance.}
  \item{\code{"zero"}}{The variance of the residuals is fixed. To
    use this variance type, the standard errors must be
    specified via parameter \code{S}.}
  \item{\code{"kroneker"}}{This variance type has not yet been
    implemented.}
}}

\item{verbose}{If \code{TRUE}, various progress updates will be
printed.}
}
\value{
A flash object.
}
\description{
This implements the greedy algorithm from Wang and
  Stephens. It can be used to adds factors to an existing fit, or
  start from scratch.  It adds factors iteratively, at each stage
  adding a new factor and then optimizing it.  It is "greedy" in that
  it does not return to re-optimize previous factors.  The function
  stops when an added factor contributes nothing, or Kmax is reached.
  Each new factor is intialized by applying the function
  \code{init_fn} to the residuals after removing previously-fitted
  factors.
}
\examples{
l = rnorm(100)
f = rnorm(10)
Y = outer(l, f) + matrix(rnorm(1000), nrow=100)
f = flash_add_greedy(Y,10)

# Gives the weights for each factor (analogue of singular values).
f$ldf$d

# Example to show how to use a different initialization function.
library(softImpute)
f2 = flash_add_greedy(Y, 10, init_fn=function(x, K=1) {
  softImpute(x, K, lambda=10)
})

}
